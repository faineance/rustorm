var searchIndex = {};
searchIndex['rustorm'] = {"items":[[0,"","rustorm","Rustorm is a simple ORM implemented in rust.",null,null],[0,"em","","",null,null],[3,"EntityManager","rustorm::em","A higher level API for manipulating objects in the database",null,null],[12,"db","","",0,null],[11,"new","","Create an entity manager with the database connection provided",0,{"inputs":[{"name":"entitymanager"},{"name":"database"}],"output":{"name":"self"}}],[11,"create_table","","create a database table aligned to this table definition",0,{"inputs":[{"name":"entitymanager"},{"name":"table"}],"output":null}],[11,"create_schema","","create a schema or namespace in the database",0,{"inputs":[{"name":"entitymanager"},{"name":"str"}],"output":null}],[11,"delete","","delete records of this table",0,{"inputs":[{"name":"entitymanager"},{"name":"table"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"drop_table","","drop the database table",0,{"inputs":[{"name":"entitymanager"},{"name":"table"}],"output":null}],[11,"drop_schema","","drop the database schema",0,{"inputs":[{"name":"entitymanager"},{"name":"str"}],"output":null}],[11,"truncate_table","","empty the database table",0,{"inputs":[{"name":"entitymanager"},{"name":"table"}],"output":{"name":"usize"}}],[11,"exist_table","","determine if the table exist",0,{"inputs":[{"name":"entitymanager"},{"name":"table"}],"output":{"name":"bool"}}],[11,"exist_schema","","determine if the schema exist",0,{"inputs":[{"name":"entitymanager"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_all","","get all the records of this table",0,{"inputs":[{"name":"entitymanager"}],"output":{"name":"vec"}}],[11,"get_all_only_columns","","get all the records of this table, but return only the columns mentioned",0,{"inputs":[{"name":"entitymanager"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"get_all_ignore_columns","","get all the records of this table, ignoring the columns listed, mentioned the other else",0,{"inputs":[{"name":"entitymanager"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"get_all_distinct","","get all the distinct records of this table",0,{"inputs":[{"name":"entitymanager"},{"name":"table"}],"output":{"name":"vec"}}],[11,"get_all_with_filter","","get all the records on this table which passed thru the filters\nany query that specified more than the parameters should use the query api",0,{"inputs":[{"name":"entitymanager"},{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"get_one","","get the first records of this table that passed thru the filters",0,{"inputs":[{"name":"entitymanager"},{"name":"filter"}],"output":{"name":"vec"}}],[11,"get_exact","","",0,{"inputs":[{"name":"entitymanager"},{"name":"totype"}],"output":{"name":"t"}}],[11,"insert","","insert this records to the database, return the inserted dao with\nvalues from default columns included\n# Example",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"t"}}],[11,"insert_with_ignore_columns","","insert this record on the database, ignoring some columns\nwhich are set by the database default\ncolumns that are ignored are set by the database automatically",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"t"}}],[11,"insert_ignore_defaulted_columns","","insert this record on the database, explicitly setting the defaults of the columns\nit may produce the same result with insert_with_ignore_columns\nthe query is different since it may mentions `created` now(),",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"t"}}],[11,"reset","","this is called when there is a problem with the transaction",0,{"inputs":[{"name":"entitymanager"}],"output":null}],[11,"rollback","","when there is a problem with the transaction process, this can be called",0,{"inputs":[{"name":"entitymanager"}],"output":null}],[11,"update","","update the Dao, return the updated Dao",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"t"}}],[11,"update_ignore_columns","","update the Dao, return the updated Dao\nignored columns will remain unchanged",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"t"}}],[11,"update_only_columns","","update the Dao, return the updated Dao\nonly the columns specified, the rest is unchanged",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"t"}}],[11,"update_ignore_defaulted_columns","","update the Dao, return the updated Dao\nthe default columns will be reset to whatever the db's default function will come up.\nie. updated column will be defaulted everytime a record is updated.",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"}],"output":{"name":"t"}}],[11,"update_with_filter","","update the Dao with filter, return the updated Dao",0,{"inputs":[{"name":"entitymanager"},{"name":"dao"},{"name":"vec"}],"output":{"name":"t"}}],[11,"save","","whether to use insert or update\ninsert when it is a new record\nupdate when it is an existing recor\nmay use UPSERT in newer versions of postgres\nmay use MERGE in oracle, mssql",0,{"inputs":[{"name":"entitymanager"},{"name":"t"}],"output":{"name":"t"}}],[0,"query","rustorm","",null,null],[3,"Join","rustorm::query","",null,null],[12,"modifier","","",1,null],[12,"join_type","","",1,null],[12,"table_name","","",1,null],[12,"column1","","",1,null],[12,"column2","","",1,null],[3,"Function","","function in a sql statement",null,null],[12,"function","","",2,null],[12,"params","","",2,null],[3,"Condition","","expression has left operand,\nequality and right operand",null,null],[12,"left_operand","","",3,null],[12,"equality","","",3,null],[12,"right_operand","","",3,null],[3,"Filter","","TODO: support for functions on columns\nTODO: need to merge with Expr",null,null],[12,"connector","","",4,null],[12,"condition","","TODO: maybe renamed to LHS, supports functions and SQL",4,null],[12,"subfilters","","",4,null],[3,"ColumnName","","",null,null],[12,"column","","",5,null],[12,"table","","",5,null],[12,"schema","","",5,null],[12,"rename","","as rename",5,null],[3,"Field","","",null,null],[12,"operand","","the field",6,null],[12,"name","","when renamed as field",6,null],[3,"TableName","","",null,null],[12,"schema","","",7,null],[12,"name","","",7,null],[12,"column_names","","",7,null],[3,"Query","","",null,null],[12,"sql_type","","sql type determine which type of query to form, some fields are not applicable to other types of query",8,null],[12,"distinct","","whether to select the records distinct",8,null],[12,"declared_query","","",8,null],[12,"enumerated_fields","","fields can be functions, column sql query, and even columns\nTODO; merge enumerated column to this, add a builder for fields",8,null],[12,"renamed_columns","","list of renamed columns whenever there is a conflict\nVec(table, column, new_column_name)",8,null],[12,"distinct_on_columns","","specify to use distinct ON set of columns",8,null],[12,"filters","","filter records, ~ where statement of the query",8,null],[12,"joins","","joining multiple tables",8,null],[12,"order_by","","ordering of the records via the columns specified",8,null],[12,"group_by","","grouping columns to create an aggregate",8,null],[12,"having","","having field",8,null],[12,"excluded_columns","","exclude the mention of the columns in the SQL query, useful when ignoring changes in update/insert records",8,null],[12,"page","","paging of records",8,null],[12,"page_size","","size of a page",8,null],[12,"from","","where the focus of values of column selection\nthis is the table to insert to, update to delete, create, drop\nwhe used in select, this is the \npub from_table:Option<TableName>,\nfrom field, where field can be a query, table, column, or function",8,null],[12,"values","","The data values, used in bulk inserting, updating,",8,null],[12,"enumerated_returns","","the returning clause of the query when supported,",8,null],[4,"JoinType","","",null,null],[13,"CROSS","","",9,null],[13,"INNER","","",9,null],[13,"OUTER","","",9,null],[4,"Modifier","","",null,null],[13,"LEFT","","",10,null],[13,"RIGHT","","",10,null],[13,"FULL","","",10,null],[4,"Direction","","",null,null],[13,"ASC","","",11,null],[13,"DESC","","",11,null],[4,"Connector","","Filter struct merged to query",null,null],[13,"And","","",12,null],[13,"Or","","",12,null],[4,"Equality","","",null,null],[13,"EQ","","",13,null],[13,"NE","","",13,null],[13,"LT","","",13,null],[13,"LTE","","",13,null],[13,"GT","","",13,null],[13,"GTE","","",13,null],[13,"IN","","",13,null],[13,"NOTIN","","",13,null],[13,"LIKE","","",13,null],[13,"NULL","","",13,null],[13,"NOTNULL","","",13,null],[13,"ISNULL","","",13,null],[4,"Operand","","Operands can be columns, functions, query or value types",null,null],[13,"ColumnName","","",14,null],[13,"TableName","","",14,null],[13,"Function","","",14,null],[13,"Query","","",14,null],[13,"Value","","",14,null],[13,"Vec","","",14,null],[4,"SqlType","","Could have been SqlAction",null,null],[13,"SELECT","","",15,null],[13,"INSERT","","",15,null],[13,"UPDATE","","",15,null],[13,"DELETE","","",15,null],[11,"fmt","","",9,{"inputs":[{"name":"jointype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"jointype"}],"output":{"name":"jointype"}}],[11,"fmt","","",10,{"inputs":[{"name":"modifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"modifier"}],"output":{"name":"modifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"join"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"join"}],"output":{"name":"join"}}],[11,"fmt","","",11,{"inputs":[{"name":"direction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"fmt","","",12,{"inputs":[{"name":"connector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"connector"}],"output":{"name":"connector"}}],[11,"fmt","","",13,{"inputs":[{"name":"equality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"equality"}],"output":{"name":"equality"}}],[11,"fmt","","",2,{"inputs":[{"name":"function"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[11,"fmt","","",14,{"inputs":[{"name":"operand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"operand"}],"output":{"name":"operand"}}],[11,"fmt","","",3,{"inputs":[{"name":"condition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"condition"}],"output":{"name":"condition"}}],[11,"fmt","","",4,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"new","","",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"totype"}],"output":{"name":"self"}}],[11,"and","","",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"totype"}],"output":{"name":"self"}}],[11,"or","","",4,{"inputs":[{"name":"filter"},{"name":"str"},{"name":"equality"},{"name":"totype"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"sqltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"sqltype"}],"output":{"name":"sqltype"}}],[11,"clone","","",5,{"inputs":[{"name":"columnname"}],"output":{"name":"columnname"}}],[11,"fmt","","",5,{"inputs":[{"name":"columnname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"complete_name","","table name and column name",5,{"inputs":[{"name":"columnname"}],"output":{"name":"string"}}],[11,"super_complete_name","","includes the schema, table name and column name",5,{"inputs":[{"name":"columnname"}],"output":{"name":"string"}}],[11,"eq","","",5,{"inputs":[{"name":"columnname"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"columnname"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"tablename"}],"output":{"name":"tablename"}}],[11,"fmt","","",7,{"inputs":[{"name":"tablename"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"complete_name","","",7,{"inputs":[{"name":"tablename"}],"output":{"name":"string"}}],[11,"eq","","",7,{"inputs":[{"name":"tablename"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"tablename"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"query"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"query"}],"output":{"name":"query"}}],[11,"new","","the default query is select",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"select","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"insert","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"update","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"delete","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"set_distinct","","add DISTINCT ie: SELECT DISTINCT",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"select_all","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"enumerate_column","","all enumerated columns shall be called from this\nany conflict of columns from some other table will be automatically renamed\ncolumns that are not conflicts from some other table,\nbut is the other conflicting column is not explicityly enumerated will not be renamed",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"enumerate_columns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"group_by","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"having","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"equality"},{"name":"totype"}],"output":{"name":"self"}}],[11,"enumerate","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"exclude_column","","exclude columns when inserting/updating data\nalso ignores the column when selecting records\nuseful for manipulating thin records by excluding huge binary blobs such as images",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"exclude_columns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"distinct_on_columns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"set_page","","when paging multiple records",8,{"inputs":[{"name":"query"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_page_size","","the number of items retrieve per page",8,{"inputs":[{"name":"query"},{"name":"usize"}],"output":{"name":"self"}}],[11,"limit","","the number of items retrieve per page",8,{"inputs":[{"name":"query"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_table","","The base table where the resulting records will be retrieved from",8,{"inputs":[{"name":"query"},{"name":"table"}],"output":{"name":"self"}}],[11,"from","","A more terse way to write the query",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"into_table","","just an alias for from_table to make it terse for Insert queries",8,{"inputs":[{"name":"query"},{"name":"table"}],"output":{"name":"self"}}],[11,"into","","",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"declare_query","","if the database support CTE declareted query i.e WITH,\nthen this query will be declared\nif database doesn't support WITH queries, then this query will be \nwrapped in the from_query\nbuild a builder for this",8,{"inputs":[{"name":"query"},{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_query","","a query to query from\nuse WITH (query) t1 SELECT from t1 declaration in postgresql, sqlite\nuse SELECT FROM (query) in oracle, mysql, others \nalias of the table",8,{"inputs":[{"name":"query"},{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_field","","",8,{"inputs":[{"name":"query"},{"name":"field"}],"output":{"name":"self"}}],[11,"get_from_table","","",8,{"inputs":[{"name":"query"}],"output":{"name":"option"}}],[11,"enumerate_table_all_columns","","list down the columns of this table then add it to the enumerated list of columns",8,{"inputs":[{"name":"query"},{"name":"table"}],"output":{"name":"self"}}],[11,"join","","join a table on this query",8,{"inputs":[{"name":"query"},{"name":"join"}],"output":{"name":"self"}}],[11,"left_join","","join a table on this query",8,{"inputs":[{"name":"query"},{"name":"table"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"right_join","","",8,{"inputs":[{"name":"query"},{"name":"table"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"full_join","","",8,{"inputs":[{"name":"query"},{"name":"table"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"inner_join","","",8,{"inputs":[{"name":"query"},{"name":"table"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"asc","","ascending orderby of this column",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"desc","","ascending orderby of this column",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"rename","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"get_involved_tables","","",8,{"inputs":[{"name":"query"}],"output":{"name":"vec"}}],[11,"finalize","","preprocess the missing fields of the query,\nsuch as mentioning the columns of the from_table\nenumerate the columns of the involved tables\nskipping those which are explicitly ignored\nthe query will then be built and ready to be executed\nTODO: renamed conflicting enumerated columns\nif no enumerated fields and no excluded columns\ndo a select all",8,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"get_enumerated_columns","","return the list of enumerated columns\nwill be used for updating records",8,{"inputs":[{"name":"query"}],"output":{"name":"vec"}}],[11,"add_filter","","",8,{"inputs":[{"name":"query"},{"name":"filter"}],"output":{"name":"self"}}],[11,"filter","","",8,{"inputs":[{"name":"query"},{"name":"str"},{"name":"equality"},{"name":"totype"}],"output":{"name":"self"}}],[11,"add_value","","",8,{"inputs":[{"name":"query"},{"name":"operand"}],"output":{"name":"self"}}],[11,"value","","",8,{"inputs":[{"name":"query"},{"name":"totype"}],"output":{"name":"self"}}],[11,"enumerate_all_table_column_as_return","","",8,{"inputs":[{"name":"query"},{"name":"table"}],"output":{"name":"self"}}],[11,"returns","","",8,{"inputs":[{"name":"query"},{"name":"vec"}],"output":{"name":"self"}}],[11,"enumerate_column_as_return","","",8,{"inputs":[{"name":"query"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","build the query only, not executed, useful when debugging",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"sqlfrag"}}],[11,"execute_with_one_return","","expects a return, such as select, insert/update with returning clause",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"dao"}}],[11,"execute","","delete, update without caring for the return",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"result"}}],[11,"collect","","execute the query, then convert the result",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"vec"}}],[11,"collect_one","","execute the query then collect only 1 record\nput a limit 1 if not already",8,{"inputs":[{"name":"query"},{"name":"database"}],"output":{"name":"t"}}],[0,"dao","rustorm","",null,null],[3,"DaoResult","rustorm::dao","meta result of a query useful when doing complex query, and also with paging",null,null],[12,"dao","","",16,null],[12,"renamed_columns","","renamed columns for each table\nie. product => [(name, product_name),..];",16,null],[12,"total","","the total number of records",16,null],[12,"page","","page of the query",16,null],[12,"page_size","","page size",16,null],[3,"Dao","","",null,null],[12,"values","","",17,null],[4,"Type","","supported generic datatypes for an ORM",null,null],[13,"Bool","","",18,null],[13,"I8","","",18,null],[13,"I16","","",18,null],[13,"I32","","",18,null],[13,"I64","","",18,null],[13,"U8","","",18,null],[13,"U16","","",18,null],[13,"U32","","",18,null],[13,"U64","","",18,null],[13,"F32","","",18,null],[13,"F64","","",18,null],[13,"String","","",18,null],[13,"VecU8","","",18,null],[13,"Map","","",18,null],[13,"Uuid","","",18,null],[13,"DateTime","","",18,null],[13,"NaiveDate","","",18,null],[13,"NaiveTime","","",18,null],[13,"NaiveDateTime","","",18,null],[13,"Null","","",18,null],[8,"ToType","","",null,null],[10,"to_db_type","","",19,{"inputs":[{"name":"totype"}],"output":{"name":"type"}}],[8,"FromType","","",null,null],[10,"from_type","","",20,{"inputs":[{"name":"fromtype"},{"name":"type"}],"output":{"name":"self"}}],[8,"IsDao","","trait for converting dao to model\nsized and clonable",null,null],[11,"from_dao_result","","converts a vector of dao to an object",21,{"inputs":[{"name":"isdao"},{"name":"daoresult"}],"output":{"name":"vec"}}],[10,"from_dao","","convert a dao object into the an instance of the generated struct from table\ntaking into considerating the renamed columns\nTODO: need to rethink about the renamed columns",21,{"inputs":[{"name":"isdao"},{"name":"dao"}],"output":{"name":"self"}}],[11,"encode","","",18,{"inputs":[{"name":"type"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"type"},{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"fmt","","",18,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_db_type","collections::string","",22,{"inputs":[{"name":"string"}],"output":{"name":"type"}}],[11,"to_db_type","uuid","",23,{"inputs":[{"name":"uuid"}],"output":{"name":"type"}}],[11,"to_db_type","chrono::datetime","",24,{"inputs":[{"name":"datetime"}],"output":{"name":"type"}}],[11,"to_db_type","chrono::naive::date","",25,{"inputs":[{"name":"naivedate"}],"output":{"name":"type"}}],[11,"to_db_type","chrono::naive::time","",26,{"inputs":[{"name":"naivetime"}],"output":{"name":"type"}}],[11,"to_db_type","chrono::naive::datetime","",27,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"type"}}],[11,"from_type","collections::string","",22,{"inputs":[{"name":"string"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_type","uuid","",23,{"inputs":[{"name":"uuid"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_type","chrono::datetime","",24,{"inputs":[{"name":"datetime"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_type","chrono::naive::time","",26,{"inputs":[{"name":"naivetime"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_type","chrono::naive::date","",25,{"inputs":[{"name":"naivedate"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_type","chrono::naive::datetime","",27,{"inputs":[{"name":"naivedatetime"},{"name":"type"}],"output":{"name":"self"}}],[11,"fmt","rustorm::dao","",16,{"inputs":[{"name":"daoresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"dao"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"dao"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"dao"}],"output":{"name":"dao"}}],[11,"fmt","","",17,{"inputs":[{"name":"dao"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"dao"}],"output":{"name":"self"}}],[11,"set","","",17,{"inputs":[{"name":"dao"},{"name":"str"},{"name":"totype"}],"output":null}],[11,"set_value","","",17,{"inputs":[{"name":"dao"},{"name":"str"},{"name":"type"}],"output":null}],[11,"get_value","","",17,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"type"}}],[11,"remove","","take the value and remove the content",17,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"t"}}],[11,"get","","take the value but not removing the content",17,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"t"}}],[11,"get_opt","","get optional value",17,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_ref","","get a reference of the type",17,{"inputs":[{"name":"dao"},{"name":"str"}],"output":{"name":"type"}}],[11,"resolve_renamed_columns","","set the short column names using the renamed columns from the table specified\nwill be used when casting a generic dao to multiple dao values, \nie. useful when querying 1 time using 1:1 joins\nTODO: deal with the optional columns",17,{"inputs":[{"name":"dao"},{"name":"str"},{"name":"btreemap"}],"output":null}],[0,"database","rustorm","",null,null],[3,"DbConfig","rustorm::database","",null,null],[4,"DbStatus","","",null,null],[13,"InUsed","","",28,null],[13,"Free","","",28,null],[4,"Platform","","",null,null],[13,"Postgres","","",29,null],[13,"Sqlite","","",29,null],[13,"Oracle","","",29,null],[13,"Mysql","","",29,null],[4,"SqlOption","","SqlOption, contains the info about the features and quirks of underlying database",null,null],[13,"UseNumberedParam","","use the numbered parameters, as the case with rust-postgres",30,null],[13,"UseQuestionMark","","sqlite, jdbc",30,null],[13,"SupportsReturningClause","","postgresql supports returning clause on insert and update",30,null],[13,"SupportsCTE","","support CTE (common table expression ie. WITH)",30,null],[13,"SupportsInheritance","","supports inheritance (postgresql)",30,null],[8,"Database","","Generic Database interface\nThis is the database interface which will should be implemented to you the specifics of each database platform\nAt least all methods on this trait should be implemented for target deployment database\nA lower level API for manipulating objects in the database",null,null],[10,"db_config","","the configuration used to connect to this database",31,{"inputs":[{"name":"database"}],"output":{"name":"dbconfig"}}],[10,"get_connection_id","","get the connection id of the database",31,{"inputs":[{"name":"database"}],"output":{"name":"uuid"}}],[10,"version","","return the version of the database\nlower version of database has fewer supported features",31,{"inputs":[{"name":"database"}],"output":{"name":"string"}}],[10,"begin","","begin database transaction",31,{"inputs":[{"name":"database"}],"output":null}],[10,"commit","","commit database transaction",31,{"inputs":[{"name":"database"}],"output":null}],[10,"rollback","","rollback data changes executed prior to calling the begin method",31,{"inputs":[{"name":"database"}],"output":null}],[10,"is_transacted","","determine if this transaction has been committed or rolledback",31,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"is_closed","","determine if the database connection closed",31,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"is_connected","","check if the database is still connected",31,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"close","","close the database connection",31,{"inputs":[{"name":"database"}],"output":null}],[10,"is_valid","","determine if the database connection is still valid",31,{"inputs":[{"name":"database"}],"output":{"name":"bool"}}],[10,"reset","","reset the database connection",31,{"inputs":[{"name":"database"}],"output":null}],[10,"select","","select\nreturns an array to the qualified records",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"daoresult"}}],[10,"insert","","insert\ninsert an object, returns the inserted Dao value\nincluding the value generated via the defaults",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"dao"}}],[10,"update","","update\nreturns the updated Dao",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"dao"}}],[10,"delete","","delete records\nreturns the number of deleted records",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[10,"execute_with_return","","execute query with return dao",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"daoresult"}}],[10,"execute_with_one_return","","execute query with 1 return dao",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"dao"}}],[10,"execute","","execute query with no return dao",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"result"}}],[10,"execute_sql_with_return","","execute insert with returning clause, update with returning clause",31,{"inputs":[{"name":"database"},{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[10,"execute_sql_with_one_return","","",31,{"inputs":[{"name":"database"},{"name":"str"},{"name":"vec"}],"output":{"name":"dao"}}],[10,"execute_sql","","everything else, no required return other than error or affected number of records",31,{"inputs":[{"name":"database"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[10,"build_query","","build a query, return the sql string and the parameters.",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_operand","","build operand, i.e: columns, query, function, values",31,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"operand"}],"output":null}],[11,"build_condition","","",31,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"condition"}],"output":null}],[11,"build_field","","",31,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"field"}],"output":null}],[11,"build_filter","","",31,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"filter"}],"output":null}],[11,"build_filters","","build the filter clause or the where clause of the query\nTODO: add the sub filters",31,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"vec"}],"output":null}],[11,"build_enumerated_fields","","build the enumerated, distinct, *, columns",31,{"inputs":[{"name":"database"},{"name":"sqlfrag"},{"name":"query"},{"name":"vec"}],"output":null}],[11,"build_select","","TODO include filters, joins, groups, paging",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_insert","","TODO complete this",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_update","","",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"build_delete","","",31,{"inputs":[{"name":"database"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[10,"sql_options","","",31,{"inputs":[{"name":"database"}],"output":{"name":"vec"}}],[8,"DatabaseDDL","","",null,null],[10,"create_schema","","The following methods involves DDL(Data definition language) operation\ncreate a database schema",32,{"inputs":[{"name":"databaseddl"},{"name":"str"}],"output":null}],[10,"drop_schema","","drop the database schema",32,{"inputs":[{"name":"databaseddl"},{"name":"str"}],"output":null}],[10,"create_table","","create a database table based on the Model Definition",32,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[10,"rename_table","","rename table, in the same schema",32,{"inputs":[{"name":"databaseddl"},{"name":"table"},{"name":"string"}],"output":null}],[10,"drop_table","","drop table",32,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[10,"set_foreign_constraint","","set the foreign key constraint of a table",32,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[10,"set_primary_constraint","","set the primary key constraint of a table",32,{"inputs":[{"name":"databaseddl"},{"name":"table"}],"output":null}],[8,"DatabaseDev","","",null,null],[10,"get_table_sub_class","","Database interface use for the development process\napplicable to later version of postgresql where there is inheritance",33,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[10,"get_parent_table","","",33,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[10,"get_table_metadata","","Build the Table object based on the extracted meta data info from database\nThis is queries directly from the database, so this will be costly. Only used this on initialization processes",33,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"table"}}],[10,"get_all_tables","","get all the tables in this database",33,{"inputs":[{"name":"databasedev"}],"output":{"name":"vec"}}],[10,"get_table_comment","","get the comment of this table",33,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[10,"get_inherited_columns","","get the inherited columns of this table",33,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[10,"dbtype_to_rust_type","","get the equivalent postgresql database data type to rust data type\nreturns (module, type)",33,null],[10,"rust_type_to_dbtype","","",33,{"inputs":[{"name":"databasedev"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[11,"to_struct_source_code","","build a source code for the struct defined by this table\n(imports, imported_tables, source code)",33,null],[11,"write_column","","",33,{"inputs":[{"name":"databasedev"},{"name":"writer"},{"name":"column"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"dbconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"dbconfig"},{"name":"dbconfig"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"dbconfig"},{"name":"dbconfig"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"dbconfig"}],"output":{"name":"dbconfig"}}],[11,"from_url","","TODO: get rid of the hacky way parsing database url\nhttps://github.com/servo/rust-url/issues/40",34,{"inputs":[{"name":"dbconfig"},{"name":"str"}],"output":{"name":"self"}}],[11,"get_url","","",34,{"inputs":[{"name":"dbconfig"}],"output":{"name":"string"}}],[11,"eq","","",30,{"inputs":[{"name":"sqloption"},{"name":"sqloption"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"sqloption"},{"name":"sqloption"}],"output":{"name":"bool"}}],[0,"db","rustorm","",null,null],[0,"postgres","rustorm::db","",null,null],[3,"Postgres","rustorm::db::postgres","",null,null],[12,"conn","","",35,null],[11,"new","","create an instance, but without a connection yet,\nuseful when just building sql queries specific to this platform\ninexpensive operation, so can have multiple instances",35,{"inputs":[{"name":"postgres"}],"output":{"name":"self"}}],[11,"with_connection","","create a postgresql instance and connect right away",35,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":{"name":"self"}}],[11,"connect","","",35,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":null}],[11,"db_config","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"dbconfig"}}],[11,"get_connection_id","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"uuid"}}],[11,"version","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"string"}}],[11,"begin","","",35,{"inputs":[{"name":"postgres"}],"output":null}],[11,"commit","","",35,{"inputs":[{"name":"postgres"}],"output":null}],[11,"rollback","","",35,{"inputs":[{"name":"postgres"}],"output":null}],[11,"is_transacted","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"is_closed","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"is_connected","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"close","","",35,{"inputs":[{"name":"postgres"}],"output":null}],[11,"is_valid","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"bool"}}],[11,"reset","","",35,{"inputs":[{"name":"postgres"}],"output":null}],[11,"sql_options","","return this list of options, supported features in the database",35,{"inputs":[{"name":"postgres"}],"output":{"name":"vec"}}],[11,"select","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"daoresult"}}],[11,"execute_with_return","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"daoresult"}}],[11,"execute_with_one_return","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"dao"}}],[11,"execute","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"result"}}],[11,"insert","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"dao"}}],[11,"update","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"dao"}}],[11,"delete","","",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"result"}}],[11,"execute_sql_with_return","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"execute_sql_with_one_return","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"vec"}],"output":{"name":"dao"}}],[11,"execute_sql","","generic execute sql which returns not much information,\nreturns only the number of affected records or errors\ncan be used with DDL operations (CREATE, DELETE, ALTER, DROP)",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"build_query","","use by select to build the select query\nbuild all types of query\nTODO: need to supply the number of parameters where to start the numbering of the number parameters",35,{"inputs":[{"name":"postgres"},{"name":"query"}],"output":{"name":"sqlfrag"}}],[11,"create_schema","","",35,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":null}],[11,"drop_schema","","",35,{"inputs":[{"name":"postgres"},{"name":"str"}],"output":null}],[11,"create_table","","",35,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"rename_table","","",35,{"inputs":[{"name":"postgres"},{"name":"table"},{"name":"string"}],"output":null}],[11,"drop_table","","",35,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"set_foreign_constraint","","",35,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"set_primary_constraint","","",35,{"inputs":[{"name":"postgres"},{"name":"table"}],"output":null}],[11,"get_parent_table","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_table_sub_class","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[11,"get_table_metadata","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"table"}}],[11,"get_all_tables","","",35,{"inputs":[{"name":"postgres"}],"output":{"name":"vec"}}],[11,"get_table_comment","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_inherited_columns","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[11,"dbtype_to_rust_type","","get the rust data type names from database data type names\nwill be used in source code generation",35,null],[11,"rust_type_to_dbtype","","",35,{"inputs":[{"name":"postgres"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[0,"table","rustorm","",null,null],[3,"Foreign","rustorm::table","",null,null],[12,"schema","","",36,null],[12,"table","","",36,null],[12,"column","","",36,null],[3,"Column","","",null,null],[12,"name","","",37,null],[12,"data_type","","the generic data type, ie: u32, f64, string",37,null],[12,"db_data_type","","the database data type of this column, ie: int, numeric, character varying",37,null],[12,"is_primary","","",37,null],[12,"is_unique","","",37,null],[12,"default","","",37,null],[12,"comment","","",37,null],[12,"not_null","","",37,null],[12,"foreign","","",37,null],[12,"is_inherited","","determines if the column is inherited from the parent table",37,null],[3,"RefTable","","all referenced table used in context",null,null],[12,"table","","the table being referred",38,null],[12,"is_ext","","",38,null],[12,"is_has_one","","",38,null],[12,"is_has_many","","",38,null],[12,"is_direct","","",38,null],[3,"Table","","",null,null],[12,"schema","","which schema this belongs",39,null],[12,"name","","the table name",39,null],[12,"parent_table","","the parent table of this table when inheriting (>= postgresql 9.3)\n[FIXME] need to tell which schema this parent table belongs\nthere might be same table in different schemas",39,null],[12,"sub_table","","what are the other table that inherits this\n[FIXME] need to tell which schema this parent table belongs\nthere might be same table in different schemas",39,null],[12,"comment","","comment of this table",39,null],[12,"columns","","columns of this table",39,null],[8,"IsTable","","trait for table definition",null,null],[10,"table","","",40,{"inputs":[{"name":"istable"}],"output":{"name":"table"}}],[11,"eq","","",36,{"inputs":[{"name":"foreign"},{"name":"foreign"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"foreign"},{"name":"foreign"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"foreign"}],"output":{"name":"foreign"}}],[11,"fmt","","",36,{"inputs":[{"name":"foreign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_source_code","","get the definition express in string code",36,{"inputs":[{"name":"foreign"}],"output":{"name":"string"}}],[11,"clone","","",37,{"inputs":[{"name":"column"}],"output":{"name":"column"}}],[11,"fmt","","",37,{"inputs":[{"name":"column"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"corrected_name","","some column names may be a rust reserve keyword, so have to correct them",37,{"inputs":[{"name":"column"}],"output":{"name":"string"}}],[11,"displayname","","",37,{"inputs":[{"name":"column"}],"output":{"name":"string"}}],[11,"condense_name","","shorten, compress the name based on the table it points to\nparent_organization_id becomes parent",37,{"inputs":[{"name":"column"}],"output":{"name":"string"}}],[11,"to_column_def_source_code","","get the column definition of the code",37,null],[11,"fmt","","",37,{"inputs":[{"name":"column"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"column"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"column"},{"name":"self"}],"output":{"name":"bool"}}],[11,"member_name","","return the appropriate member name of this reference\nwhen used with the table in context\nwill have to use another name if the comed up name\nalready in the column names\n1. the concise name of the referred/referrring table\n2. the name of the referred/referring table\n3. the appended column_name and the table name\n4. the table_name appended with HasMany, or HasOne\n1:1, 1:M, M:M\n11, 1m mm",38,{"inputs":[{"name":"reftable"},{"name":"table"}],"output":{"name":"string"}}],[11,"fmt","","",39,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"table"}],"output":{"name":"table"}}],[11,"fmt","","",39,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"table"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"table"},{"name":"self"}],"output":{"name":"bool"}}],[11,"complete_name","","return the long name of the table using schema.table_name",39,{"inputs":[{"name":"table"}],"output":{"name":"string"}}],[11,"struct_name","","capitalize the first later, if there is underscore remove it then capitalize the next letter",39,{"inputs":[{"name":"table"}],"output":{"name":"string"}}],[11,"displayname","","get the display name of this table\nproduct_availability -> Product Availability",39,{"inputs":[{"name":"table"}],"output":{"name":"string"}}],[11,"condensed_displayname","","get a shorter display name of a certain table\nwhen being refered to this table\nexample product.product_availability -> Availability\nuser.user_info -> Info",39,{"inputs":[{"name":"table"},{"name":"table"}],"output":{"name":"string"}}],[11,"condensed_member_name","","get a condensed name of this table when used in contex with another table",39,{"inputs":[{"name":"table"},{"name":"table"}],"output":{"name":"string"}}],[11,"has_column_name","","determine if this table has a colum named",39,{"inputs":[{"name":"table"},{"name":"str"}],"output":{"name":"bool"}}],[11,"primary_columns","","return all the primary columns of this table",39,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"uninherited_columns","","return all the columns of this table excluding the inherited columns",39,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"inherited_columns","","return all the inherited columns",39,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"is_primary","","check to see if the column is a primary or not\nthe Column.is_primary property is not reliable since it also list down the foreign key\nwhich makes it 2 entries in the table",39,{"inputs":[{"name":"table"},{"name":"str"}],"output":{"name":"bool"}}],[11,"unique_columns","","return all the unique keys of this table",39,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"foreign_columns","","",39,{"inputs":[{"name":"table"}],"output":{"name":"vec"}}],[11,"get_table","","return the first match of table name regardless of which schema it belongs to.\nget the table definition using the table name from an array of table object\n[FIXME] Needs to have a more elegant solution by using HashMap",39,{"inputs":[{"name":"table"},{"name":"str"},{"name":"str"},{"name":"vec"}],"output":{"name":"table"}}],[11,"get_all_referenced_table","","",39,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"to_tabledef_source_code","","build a source code which express it self as a table object\nwhich is a meta definition of the struct itself",39,null],[0,"writer","rustorm","",null,null],[3,"Writer","rustorm::writer","generic string writer\nuse this for writing source code",null,null],[12,"src","","",41,null],[3,"SqlFrag","","sql fragment\nuse this for writing SQL statements",null,null],[12,"sql","","",42,null],[12,"params","","",42,null],[12,"sql_options","","",42,null],[11,"fmt","","",41,{"inputs":[{"name":"writer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"append","","",41,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"self"}}],[11,"appendln","","",41,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"self"}}],[11,"tab","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"tabs","","",41,{"inputs":[{"name":"writer"},{"name":"u32"}],"output":{"name":"self"}}],[11,"ln","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"ln_tab","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"ln_tabs","","",41,{"inputs":[{"name":"writer"},{"name":"u32"}],"output":{"name":"self"}}],[11,"comma","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"sp","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"commasp","","",41,{"inputs":[{"name":"writer"}],"output":{"name":"self"}}],[11,"comment","","",41,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"self"}}],[11,"doc_comment","","",41,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"self"}}],[11,"inner_doc_comment","","",41,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"vec"}],"output":{"name":"self"}}],[11,"append","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"appendln","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"tab","","",42,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"tabs","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"u32"}],"output":{"name":"self"}}],[11,"ln","","",42,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"ln_tab","","",42,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"ln_tabs","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"u32"}],"output":{"name":"self"}}],[11,"comma","","",42,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"sp","","",42,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"commasp","","",42,{"inputs":[{"name":"sqlfrag"}],"output":{"name":"self"}}],[11,"comment","","",42,{"inputs":[{"name":"sqlfrag"},{"name":"str"}],"output":{"name":"self"}}],[11,"parameter","","append parameter including the needed sql keywords",42,{"inputs":[{"name":"sqlfrag"},{"name":"type"}],"output":null}],[0,"codegen","rustorm","",null,null],[3,"Config","rustorm::codegen","configuration for generating code",null,null],[12,"base_module","","the module name to be used when it is possible to unify all tables in 1 module\nlikely the project name",43,null],[12,"include_table_references","","include the has_one, has_many, extension Models",43,null],[12,"use_condensed_name","","use the condense name of the has_many else, use the table name referred",43,null],[12,"generate_table_meta","","generate the is table definition for each table",43,null],[12,"base_dir","","base directory for the generated content",43,null],[5,"get_all_tables","","",null,{"inputs":[{"name":"t"}],"output":{"name":"vec"}}],[5,"get_schemas","","get the database schema",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"get_tables_in_schema","","get all tables with schema name",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"generate_all","","this is the default config generation\nFIXME need to compartmentalize each\n1. structs\n2. meta\nmod.rs",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":null}],[11,"default","","",43,{"inputs":[{"name":"config"}],"output":{"name":"self"}}]],"paths":[[3,"EntityManager"],[3,"Join"],[3,"Function"],[3,"Condition"],[3,"Filter"],[3,"ColumnName"],[3,"Field"],[3,"TableName"],[3,"Query"],[4,"JoinType"],[4,"Modifier"],[4,"Direction"],[4,"Connector"],[4,"Equality"],[4,"Operand"],[4,"SqlType"],[3,"DaoResult"],[3,"Dao"],[4,"Type"],[8,"ToType"],[8,"FromType"],[8,"IsDao"],[3,"String"],[3,"Uuid"],[3,"DateTime"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[4,"DbStatus"],[4,"Platform"],[4,"SqlOption"],[8,"Database"],[8,"DatabaseDDL"],[8,"DatabaseDev"],[3,"DbConfig"],[3,"Postgres"],[3,"Foreign"],[3,"Column"],[3,"RefTable"],[3,"Table"],[8,"IsTable"],[3,"Writer"],[3,"SqlFrag"],[3,"Config"]]};
initSearch(searchIndex);
